01/07/2021
Topics: Inheritance & Exceptions Practice

packageName: day46_JavaRecap

Warmup tasks:
	MorningWorkOut:
		1. Do 30 push ups
				try pausing 1.5 seconds in each

		2. Do 20 Pull up
				try pausing 2.5 seconds in each

	Car Task:
		1. create a class called Car:
					Attributes: Brand, Model, Color, Year, Price

					Add a constructor that can initialize the instances:
								if the price is set to negative throw an exception with a message of: "Car price can't be negative"

								if the the year is greater than current year or negative, throw an exception with a message of: "Invalid Year"

					Methods: start, drive, toString

		2. create the following sub classes of Car:
						1. Mercedes
						2. BMW   // AutoPark
						3. Lexus
						4. Tesla  // AutoPilot

					Make sure those class cannot be inherited

					each sub class should have constructor with 4 arguments: Model, Color, Year, Price

		3. create a class called CarMax

				create objects of each Cars, and set:
						year: 2022
						price: -25000


	Shape Task:
		1. create a class called Shape:
				Attributes: name

				add a constuctor that can set the name of the shape:
						if shape' name is set to be empty, throw an exception with a message of: "Shape Name cannot be empty"

						if name contains a character that is not letter, throw an exception with a message of: "No such a Shape"


				methods:
					area(): returns the area of the shape
					perimeter(): returns the perimeter of the shape
					toString(): prints the shape' Name, Area and Perimeter


		2. create a class called Circle
				Attributes: name, r, d, PI

				Add a constructor that can set the instances of the Circle:
						if the radius of the circle is 0 or negative, throw an exception with a message of: "No Such a Circle with a radius of: r"  replace the r with given radius


				methods:
					area(): returns the area of the circle
					perimeter(): returns the perimeter of the circle


		3. create a class called Rectangle:
				Attributes: name, l, w

				Add a constructor that can set the instances of the Rectangle:
						if the length or width of the rectangle is 0 or negative, throw an exception with a message of: "No Such a Rectangle with a length and width of: l & w "  replace l & w with given length and width


				methods:
					area(): returns the area of the rectangle
					perimeter(): returns the perimeter of the rectangle






OOP:
	Abstraction
	Polymorphism






